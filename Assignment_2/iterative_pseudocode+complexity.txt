//pseudo code for the iterative function
Algorithm traverse ( start_row, start_col, board)
{
  Input start_row, start_col, 2D integer array board
  Output boolean true or false
  
  STACK options(Integer)
  ARRAY visited(Boolean)
  INTEGER current_point <- i*board.length+j
  options.add(current_point)
        while(!options.isEmpty()){
            current_point <- options.pop()
            i <- current_point/board.length
            j <- current_point%board.length
            IF(!visited[current_point]){
                INTEGER step <- board[i][j]
                INTEGER new_i <- i
                INTEGER new_j <- j
                INTEGER new_val <- current_point
                IF(i-step >= 0){
                    new_i -= step
                    new_val <- new_i*board.length+new_j
                    IF(board[new_i][new_j]!=0 AND !visited[new_val]) options.add(new_val) 
                    else IF(board[new_i][new_j]==0) return true
                    new_i<-i
                }
                IF(i+step < board.length){
                    new_i += step
                    new_val = new_i*board.length+new_j
                    IF(board[new_i][new_j]!=0 AND !visited[new_val]) options.add(new_val)
                    else IF(board[new_i][new_j]==0) return true
                    new_i=i
                }
                IF(j-step >= 0){
                    new_j -= step
                    new_val = new_i*board.length+new_j
                    IF(board[new_i][new_j]!=0 AND !visited[new_val]) options.add(new_val)
                    ELSE IF(board[new_i][new_j]==0) return true
                    new_j<-j
                }
                IF(j+step < board.length){
                    new_j += step
                    new_val <- new_i*board.length+new_j
                    IF(board[new_i][new_j]!=0 AND !visited[new_val]) options.add(new_val)
                    ELSE IF(board[new_i][new_j]==0) return true
                    new_j<-j
                }
                
                visited[current_point] <- true
            }
        }
        return false



}

//time complexity of the function
//O(n^2), considering the O of a DFS tree which is O(vertices + edges) worst case we're checking all possibilities for each value on the board and we never visit a value twice and we'll only stop when we either get to 0 or have visited all the values can be considered as O(n^2)


//space complexity of the function
//Stack is both O(1) time for storing(push) and O(1) for retrieving(pop)
//The stack uses O(N^2)space to fit in all 2D array values in the worst case possible same thing goes for the visited array which can store n^2 values in worst case so we'll have 2N^2 which can be considered as O(N^2)

//We have chosen a stack over a queue - you can think about it as a dfs tree , generally we use a queue(first in first out) when we want to get things out in order we have put them in however with stack (first in last out) we can get things out in a reverse order and that's what I need in this algorithm. In a simple setting the time complexity for stack would be O(1) but for a queue it would be O(n). 



